@import "../generator/variables.less";

#grid {
	// row
	.row (@has-gutter: @gird-semantic-hasGutter, @gutter-width: @grid-semantic-gutterWidth) {
		letter-spacing: -0.31em; // Webkit: collapse white-space between units
		*letter-spacing: normal; // reset IE < 8
		*word-spacing: -0.43em; // IE < 8: collapse white-space between units
		text-rendering: optimizespeed; // Webkit: fixes text-rendering: optimizeLegibility
		list-style: none;
	}
	.row (@has-gutter: @gird-semantic-hasGutter, @gutter-width: @grid-semantic-gutterWidth) when (@has-gutter = true){
		margin-left: -@gutter-width/2;
		margin-right: -@gutter-width/2;
	}

	// column
	.column (@has-gutter: @gird-semantic-hasGutter, @gutter-width: @grid-semantic-gutterWidth) {
		display: inline-block;
		-webkit-box-sizing: border-box;
		-moz-box-sizing: border-box;
		-ms-box-sizing: border-box;
		-o-box-sizing: border-box;
		box-sizing: border-box;
		min-height: 1px; // prevent collapsing columns
		letter-spacing: normal;
		word-spacing: normal;
		vertical-align: top;
		text-rendering: auto;
		*display: inline; // For IE6/IE7
		*zoom: 1; // For IE6/IE7
	}

	.column (@has-gutter: @gird-semantic-hasGutter, @gutter-width: @grid-semantic-gutterWidth) when (@has-gutter = true){
		margin-left: @gutter-width/2;
		margin-right: @gutter-width/2;
	}

	// span
	.span (@x:1, @columns:@grid-semantic-columns, @has-gutter: @gird-semantic-hasGutter, @gutter-width: @grid-semantic-gutterWidth) {
		#grid > .column-width ((100% / @columns) * @x, @has-gutter, @gutter-width);
		.column (@has-gutter, @gutter-width);
	}

	// push will make moves to the right
	.push (@offset:1, @columns:@grid-semantic-columns, @has-gutter: @gird-semantic-hasGutter, @gutter-width: @grid-semantic-gutterWidth) {
		#grid > .push-width ((100% / @columns) * @offset, @has-gutter, @gutter-width);
	}

	// pull will make moves to the left
	.pull (@offset:1, @columns:@grid-semantic-columns, @has-gutter: @gird-semantic-hasGutter, @gutter-width: @grid-semantic-gutterWidth) {
		#grid > .pull-width ((100% / @columns) * @offset, @has-gutter, @gutter-width);
	}

	// column width
	.column-width (@column-width, @has-gutter, @gutter-width: @grid-gutterWidth) when (@has-gutter = false){
		width: round(@column-width, 3);
	}
	.column-width (@column-width, @has-gutter, @gutter-width: @grid-gutterWidth) when (@has-gutter = true){
		@width: round(@column-width, 3);
		width: round(@width - @grid-ie8-gutterWidth, 3);
		width: ~"-webkit-calc(@{width} - @{gutter-width})";
		width:    ~"-moz-calc(@{width} - @{gutter-width})";
		width:      ~"-o-calc(@{width} - @{gutter-width})";
		width:         ~"calc(@{width} - @{gutter-width})";
	}

	// push margin width
	.push-width (@push-width, @has-gutter, @gutter-width: @grid-gutterWidth) when (@has-gutter = false){
		margin-left: @push-width;
	}
	.push-width (@push-width, @has-gutter, @gutter-width: @grid-gutterWidth) when (@has-gutter = true) and not (@push-width = 0){
		@half-gutter-width: @gutter-width/2;
		@width: round(@push-width, 3);
		margin-left: @width + @grid-ie8-gutterWidth/2;
		margin-left: ~"-webkit-calc(@{width} + @{half-gutter-width})";
		margin-left:    ~"-moz-calc(@{width} + @{half-gutter-width})";
		margin-left:      ~"-o-calc(@{width} + @{half-gutter-width})";
		margin-left:         ~"calc(@{width} + @{half-gutter-width})";
	}
	.push-width (@push-width, @has-gutter, @gutter-width: @grid-gutterWidth) when (@has-gutter = true) and (@push-width = 0){
		@half-gutter-width: @gutter-width/2;

		margin-left: @grid-ie8-gutterWidth/2;
		margin-left: ~"-webkit-calc(@{half-gutter-width})";
		margin-left:    ~"-moz-calc(@{half-gutter-width})";
		margin-left:      ~"-o-calc(@{half-gutter-width})";
		margin-left:         ~"calc(@{half-gutter-width})";
	}

	// pull margin width
	.pull-width (@pull-width, @has-gutter, @gutter-width: @grid-gutterWidth) when (@has-gutter = false){
		margin-right: @pull-width;
	}
	.pull-width (@pull-width, @has-gutter, @gutter-width: @grid-gutterWidth) when (@has-gutter = true) and not (@pull-width = 0){
		@width: round(@pull-width, 3);
		@half-gutter-width: @gutter-width/2;

		margin-right: @width + @grid-ie8-gutterWidth/2;
		margin-right: ~"-webkit-calc(@{width} + @{half-gutter-width})";
		margin-right:    ~"-moz-calc(@{width} + @{half-gutter-width})";
		margin-right:      ~"-o-calc(@{width} + @{half-gutter-width})";
		margin-right:         ~"calc(@{width} + @{half-gutter-width})";
	}
	.pull-width (@pull-width, @has-gutter, @gutter-width: @grid-gutterWidth) when (@has-gutter = true) and (@pull-width = 0){
		@half-gutter-width: @gutter-width/2;

		margin-right: @pull-width + @grid-ie8-gutterWidth/2;
		margin-right: ~"-webkit-calc(@{half-gutter-width})";
		margin-right:    ~"-moz-calc(@{half-gutter-width})";
		margin-right:      ~"-o-calc(@{half-gutter-width})";
		margin-right:         ~"calc(@{half-gutter-width})";
	}
}