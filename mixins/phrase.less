@phrase-numerator:  one two three four five six seven eight nine ten eleven twelve;
@phrase-denominator: full half third fourth fifth sixth;


#grid {
	.phrase (@gridColumns, @grid-phrase-withNoGutter) {
		@namespace: ;
		#grid > .phrase (@namespace, @gridColumns, @grid-phrase-withNoGutter);
	}
	.phrase (@namespace, @gridColumns, @grid-phrase-withNoGutter) {
		// define
		.denominatorX (@index) when (@index < @gridColumns + 1) {
			@denominator-word: extract(@phrase-denominator, @index);
			.@{denominator-word} {
				width: 100%/@index - @grid-ie8-gutterWidth;
				width: ~"-webkit-calc(100%/@{index} - @{grid-gutterWidth})";
				width:    ~"-moz-calc(100%/@{index} - @{grid-gutterWidth})";
				width:      ~"-o-calc(100%/@{index} - @{grid-gutterWidth})";
				width:         ~"calc(100%/@{index} - @{grid-gutterWidth})";
			}
			
			.numeratorX (@numerator) when (@numerator < @index) {
				@numerator-word: extract(@phrase-numerator, @numerator);

				.@{numerator-word}-@{denominator-word} {
					width: (100%/@index)*@numerator - @grid-ie8-gutterWidth;
					width: ~"-webkit-calc(100%*@{numerator}/@{index} - @{grid-gutterWidth})";
					width:    ~"-moz-calc(100%*@{numerator}/@{index} - @{grid-gutterWidth})";
					width:      ~"-o-calc(100%*@{numerator}/@{index} - @{grid-gutterWidth})";
					width:         ~"calc(100%*@{numerator}/@{index} - @{grid-gutterWidth})";
				}
				.numeratorX (@numerator + 1);
			}

			.numeratorX (2);

			.denominatorX (@index + 1);
		}
		.withNoGutter (@grid-phrase-withNoGutter) when (@grid-phrase-withNoGutter = true) {
			@grid-phrase-withNoGutter: false;
			@grid-ie8-gutterWidth: 0;
			@grid-gutterWidth: 0;
			.no-gutter {
				#grid > .phrase (@grid-phrase-columns, @grid-phrase-withNoGutter);
			}
		}

		// generate
		.denominatorX (1);
		.withNoGutter (@grid-phrase-withNoGutter);
	}
}